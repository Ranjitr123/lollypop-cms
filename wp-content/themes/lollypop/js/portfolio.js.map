{"version":3,"sources":["portfolio.js"],"names":["MathUtils","map","x","a","b","c","d","lerp","n","body","document","winsize","calcWinsize","width","window","innerWidth","height","innerHeight","addEventListener","docScroll","getPageYScroll","pageYOffset","documentElement","scrollTop","Item","el","DOM","image","querySelector","renderedStyles","innerTranslationY","previous","current","ease","maxValue","parseInt","getComputedStyle","getPropertyValue","setValue","minValue","Math","max","min","props","top","update","observer","IntersectionObserver","entries","forEach","isVisible","entry","intersectionRatio","observe","initEvents","getSize","key","layout","rect","getBoundingClientRect","resize","style","transform","SmoothScroll","main","scrollable","items","querySelectorAll","push","item","translationY","setSize","requestAnimationFrame","render","scrollHeight","position","left","overflow","preloadImages","Promise","resolve","reject","imagesLoaded","background","then","classList","remove","$","on","addClass","bdH","outerHeight","console","log","css"],"mappings":";;;;;;;;AACA;AACI;AACA,QAAMA,YAAY;AACd;AACAC,aAAK,aAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb;AAAA,mBAAmB,CAACJ,IAAIC,CAAL,KAAWG,IAAID,CAAf,KAAqBD,IAAID,CAAzB,IAA8BE,CAAjD;AAAA,SAFS;AAGd;AACAE,cAAM,cAACJ,CAAD,EAAIC,CAAJ,EAAOI,CAAP;AAAA,mBAAa,CAAC,IAAIA,CAAL,IAAUL,CAAV,GAAcK,IAAIJ,CAA/B;AAAA;AAJQ,KAAlB;;AAOA;AACA,QAAMK,OAAOC,SAASD,IAAtB;;AAEA;AACA,QAAIE,gBAAJ;AACA,QAAMC,cAAc,SAAdA,WAAc;AAAA,eAAMD,UAAU,EAACE,OAAOC,OAAOC,UAAf,EAA2BC,QAAQF,OAAOG,WAA1C,EAAhB;AAAA,KAApB;AACAL;AACA;AACAE,WAAOI,gBAAP,CAAwB,QAAxB,EAAkCN,WAAlC;;AAEA;AACA,QAAIO,kBAAJ;AACA,QAAMC,iBAAiB,SAAjBA,cAAiB;AAAA,eAAMD,YAAYL,OAAOO,WAAP,IAAsBX,SAASY,eAAT,CAAyBC,SAAjE;AAAA,KAAvB;AACAT,WAAOI,gBAAP,CAAwB,QAAxB,EAAkCE,cAAlC;;AAEA;;AAxBJ,QAyBUI,IAzBV;AA0BQ,sBAAYC,EAAZ,EAAgB;AAAA;;AAAA;;AACZ;AACA,iBAAKC,GAAL,GAAW,EAACD,IAAIA,EAAL,EAAX;AACA;AACA,iBAAKC,GAAL,CAASC,KAAT,GAAiB,KAAKD,GAAL,CAASD,EAAT,CAAYG,aAAZ,CAA0B,YAA1B,CAAjB;AACA,iBAAKC,cAAL,GAAsB;AAClB;AACA;AACA;AACAC,mCAAmB;AACf;AACAC,8BAAU,CAFK;AAGf;AACAC,6BAAS,CAJM;AAKf;AACAC,0BAAM,GANS;AAOf;AACAC,8BAAUC,SAASC,iBAAiB,KAAKV,GAAL,CAASC,KAA1B,EAAiCU,gBAAjC,CAAkD,YAAlD,CAAT,EAA0E,EAA1E,CARK;AASf;AACA;AACA;AACA;AACAC,8BAAU,oBAAM;AACZ,4BAAMJ,WAAW,MAAKL,cAAL,CAAoBC,iBAApB,CAAsCI,QAAvD;AACA,4BAAMK,WAAW,CAAC,CAAD,GAAKL,QAAtB;AACA,+BAAOM,KAAKC,GAAL,CAASD,KAAKE,GAAL,CAAS1C,UAAUC,GAAV,CAAc,MAAK0C,KAAL,CAAWC,GAAX,GAAiBzB,SAA/B,EAA0CR,QAAQK,MAAlD,EAA0D,CAAC,CAAD,GAAK,MAAK2B,KAAL,CAAW3B,MAA1E,EAAkFuB,QAAlF,EAA4FL,QAA5F,CAAT,EAAgHA,QAAhH,CAAT,EAAoIK,QAApI,CAAP;AACH;AAjBc;AAJD,aAAtB;AAwBA;AACA,iBAAKM,MAAL;AACA;AACA;AACA,iBAAKC,QAAL,GAAgB,IAAIC,oBAAJ,CAAyB,UAACC,OAAD,EAAa;AAClDA,wBAAQC,OAAR,CAAgB;AAAA,2BAAS,MAAKC,SAAL,GAAiBC,MAAMC,iBAAN,GAA0B,CAApD;AAAA,iBAAhB;AACH,aAFe,CAAhB;AAGA,iBAAKN,QAAL,CAAcO,OAAd,CAAsB,KAAK3B,GAAL,CAASD,EAA/B;AACA;AACA,iBAAK6B,UAAL;AACH;;AAjET;AAAA;AAAA,qCAkEiB;AACL;AACA,qBAAKC,OAAL;AACA;AACA,qBAAK,IAAMC,GAAX,IAAkB,KAAK3B,cAAvB,EAAwC;AACpC,yBAAKA,cAAL,CAAoB2B,GAApB,EAAyBxB,OAAzB,GAAmC,KAAKH,cAAL,CAAoB2B,GAApB,EAAyBzB,QAAzB,GAAoC,KAAKF,cAAL,CAAoB2B,GAApB,EAAyBlB,QAAzB,EAAvE;AACH;AACD;AACA,qBAAKmB,MAAL;AACH;AA3ET;AAAA;AAAA,sCA4EkB;AACN,oBAAMC,OAAO,KAAKhC,GAAL,CAASD,EAAT,CAAYkC,qBAAZ,EAAb;AACA,qBAAKhB,KAAL,GAAa;AACT;AACA3B,4BAAQ0C,KAAK1C,MAFJ;AAGT;AACA4B,yBAAKzB,YAAYuC,KAAKd;AAJb,iBAAb;AAMH;AApFT;AAAA;AAAA,yCAqFqB;AAAA;;AACT9B,uBAAOI,gBAAP,CAAwB,QAAxB,EAAkC;AAAA,2BAAM,OAAK0C,MAAL,EAAN;AAAA,iBAAlC;AACH;AAvFT;AAAA;AAAA,qCAwFiB;AACL;AACA,qBAAKf,MAAL;AACH;AA3FT;AAAA;AAAA,qCA4FiB;AACL;AACA,qBAAK,IAAMW,GAAX,IAAkB,KAAK3B,cAAvB,EAAwC;AACpC,yBAAKA,cAAL,CAAoB2B,GAApB,EAAyBxB,OAAzB,GAAmC,KAAKH,cAAL,CAAoB2B,GAApB,EAAyBlB,QAAzB,EAAnC;AACA,yBAAKT,cAAL,CAAoB2B,GAApB,EAAyBzB,QAAzB,GAAoC/B,UAAUO,IAAV,CAAe,KAAKsB,cAAL,CAAoB2B,GAApB,EAAyBzB,QAAxC,EAAkD,KAAKF,cAAL,CAAoB2B,GAApB,EAAyBxB,OAA3E,EAAoF,KAAKH,cAAL,CAAoB2B,GAApB,EAAyBvB,IAA7G,CAApC;AACH;AACD;AACA,qBAAKwB,MAAL;AACH;AApGT;AAAA;AAAA,qCAqGiB;AACL;AACA,qBAAK/B,GAAL,CAASC,KAAT,CAAekC,KAAf,CAAqBC,SAArB,sBAAkD,KAAKjC,cAAL,CAAoBC,iBAApB,CAAsCC,QAAxF;AACH;AAxGT;;AAAA;AAAA;;AA2GI;;;AA3GJ,QA4GUgC,YA5GV;AA6GQ,gCAAc;AAAA;;AAAA;;AACV;AACA,iBAAKrC,GAAL,GAAW,EAACsC,MAAMtD,SAASkB,aAAT,CAAuB,MAAvB,CAAP,EAAX;AACA;AACA;AACA,iBAAKF,GAAL,CAASuC,UAAT,GAAsB,KAAKvC,GAAL,CAASsC,IAAT,CAAcpC,aAAd,CAA4B,kBAA5B,CAAtB;AACA;AACA,iBAAKsC,KAAL,GAAa,EAAb;AACA,yCAAI,KAAKxC,GAAL,CAASsC,IAAT,CAAcG,gBAAd,CAA+B,kBAA/B,CAAJ,GAAwDlB,OAAxD,CAAgE;AAAA,uBAAQ,OAAKiB,KAAL,CAAWE,IAAX,CAAgB,IAAI5C,IAAJ,CAAS6C,IAAT,CAAhB,CAAR;AAAA,aAAhE;AACA;AACA;AACA;AACA,iBAAKxC,cAAL,GAAsB;AAClByC,8BAAc;AACV;AACAvC,8BAAU,CAFA;AAGV;AACAC,6BAAS,CAJC;AAKV;AACAC,0BAAM,GANI;AAOV;AACA;AACAK,8BAAU;AAAA,+BAAMnB,SAAN;AAAA;AATA;AADI,aAAtB;AAaA;AACA,iBAAKoD,OAAL;AACA;AACA,iBAAK1B,MAAL;AACA;AACA,iBAAKgB,KAAL;AACA;AACA,iBAAKP,UAAL;AACA;AACAkB,kCAAsB;AAAA,uBAAM,OAAKC,MAAL,EAAN;AAAA,aAAtB;AACH;;AAhJT;AAAA;AAAA,qCAiJiB;AACL;AACA,qBAAK,IAAMjB,GAAX,IAAkB,KAAK3B,cAAvB,EAAwC;AACpC,yBAAKA,cAAL,CAAoB2B,GAApB,EAAyBxB,OAAzB,GAAmC,KAAKH,cAAL,CAAoB2B,GAApB,EAAyBzB,QAAzB,GAAoC,KAAKF,cAAL,CAAoB2B,GAApB,EAAyBlB,QAAzB,EAAvE;AACH;AACD;AACA,qBAAKmB,MAAL;AACH;AAxJT;AAAA;AAAA,qCAyJiB;AACL;AACA,qBAAK/B,GAAL,CAASuC,UAAT,CAAoBJ,KAApB,CAA0BC,SAA1B,sBAAuD,CAAC,CAAD,GAAG,KAAKjC,cAAL,CAAoByC,YAApB,CAAiCvC,QAA3F;AACH;AA5JT;AAAA;AAAA,sCA6JkB;AACN;AACAtB,qBAAKoD,KAAL,CAAW7C,MAAX,GAAuB,KAAKU,GAAL,CAASuC,UAAT,CAAoBS,YAA3C;AACH;AAhKT;AAAA;AAAA,oCAiKgB;AACJ;AACA;AACA,qBAAKhD,GAAL,CAASsC,IAAT,CAAcH,KAAd,CAAoBc,QAApB,GAA+B,OAA/B;AACA,qBAAKjD,GAAL,CAASsC,IAAT,CAAcH,KAAd,CAAoBhD,KAApB,GAA4B,KAAKa,GAAL,CAASsC,IAAT,CAAcH,KAAd,CAAoB7C,MAApB,GAA6B,MAAzD;AACA,qBAAKU,GAAL,CAASsC,IAAT,CAAcH,KAAd,CAAoBjB,GAApB,GAA0B,KAAKlB,GAAL,CAASsC,IAAT,CAAcH,KAAd,CAAoBe,IAApB,GAA2B,CAArD;AACA,qBAAKlD,GAAL,CAASsC,IAAT,CAAcH,KAAd,CAAoBgB,QAApB,GAA+B,QAA/B;AACH;AAxKT;AAAA;AAAA,yCAyKqB;AAAA;;AACT;AACA/D,uBAAOI,gBAAP,CAAwB,QAAxB,EAAkC;AAAA,2BAAM,OAAKqD,OAAL,EAAN;AAAA,iBAAlC;AACH;AA5KT;AAAA;AAAA,qCA6KiB;AAAA;;AACL;AACA,qBAAK,IAAMf,GAAX,IAAkB,KAAK3B,cAAvB,EAAwC;AACpC,yBAAKA,cAAL,CAAoB2B,GAApB,EAAyBxB,OAAzB,GAAmC,KAAKH,cAAL,CAAoB2B,GAApB,EAAyBlB,QAAzB,EAAnC;AACA,yBAAKT,cAAL,CAAoB2B,GAApB,EAAyBzB,QAAzB,GAAoC/B,UAAUO,IAAV,CAAe,KAAKsB,cAAL,CAAoB2B,GAApB,EAAyBzB,QAAxC,EAAkD,KAAKF,cAAL,CAAoB2B,GAApB,EAAyBxB,OAA3E,EAAoF,KAAKH,cAAL,CAAoB2B,GAApB,EAAyBvB,IAA7G,CAApC;AACH;AACD;AACA,qBAAKwB,MAAL;;AAEA;AATK;AAAA;AAAA;;AAAA;AAUL,yCAAmB,KAAKS,KAAxB,8HAA+B;AAAA,4BAApBG,IAAoB;;AAC3B;AACA;AACA,4BAAKA,KAAKnB,SAAV,EAAsB;AAClBmB,iCAAKI,MAAL;AACH;AACJ;;AAED;AAlBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBLD,sCAAsB;AAAA,2BAAM,OAAKC,MAAL,EAAN;AAAA,iBAAtB;AACH;AAjMT;;AAAA;AAAA;;AAoMI;AACA;;AAEA;;;AACA,QAAMK,gBAAgB,SAAhBA,aAAgB,GAAM;AACxB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,yBAAaxE,SAASyD,gBAAT,CAA0B,YAA1B,CAAb,EAAsD,EAACgB,YAAY,IAAb,EAAtD,EAA0EH,OAA1E;AACH,SAFM,CAAP;AAGH,KAJD;;AAMA;AACAF,oBAAgBM,IAAhB,CAAqB,YAAM;AACvB;AACA1E,iBAASD,IAAT,CAAc4E,SAAd,CAAwBC,MAAxB,CAA+B,SAA/B;AACA;AACAlE;AACA;AACA,YAAI2C,YAAJ;AACH,KAPD;AAQH;;AAGDwB,EAAEzE,MAAF,EAAU0E,EAAV,CAAa,MAAb,EAAqB,YAAW;AAC5BD,MAAE,QAAF,EAAYE,QAAZ,CAAqB,OAArB;;AAEA,QAAIC,MAAMvD,SAAUoD,EAAE,MAAF,EAAUI,WAAV,EAAD,GAA0B,GAAnC,IAAwC,IAAlD;AACAC,YAAQC,GAAR,CAAYH,GAAZ;AACDH,MAAE,MAAF,EAAUO,GAAV,CAAc;AACV,kBAAUJ;AADA,KAAd;AAIF,CATD","file":"portfolio.js","sourcesContent":["\r\n{\r\n    // helper functions\r\n    const MathUtils = {\r\n        // map number x from range [a, b] to [c, d]\r\n        map: (x, a, b, c, d) => (x - a) * (d - c) / (b - a) + c,\r\n        // linear interpolation\r\n        lerp: (a, b, n) => (1 - n) * a + n * b\r\n    };\r\n\r\n    // body element\r\n    const body = document.body;\r\n    \r\n    // calculate the viewport size\r\n    let winsize;\r\n    const calcWinsize = () => winsize = {width: window.innerWidth, height: window.innerHeight};\r\n    calcWinsize();\r\n    // and recalculate on resize\r\n    window.addEventListener('resize', calcWinsize);\r\n\r\n    // scroll position and update function\r\n    let docScroll;\r\n    const getPageYScroll = () => docScroll = window.pageYOffset || document.documentElement.scrollTop;\r\n    window.addEventListener('scroll', getPageYScroll);\r\n\r\n    // Item\r\n    class Item {\r\n        constructor(el) {\r\n            // the .item element\r\n            this.DOM = {el: el};\r\n            // the inner image\r\n            this.DOM.image = this.DOM.el.querySelector('.item__img');\r\n            this.renderedStyles = {\r\n                // here we define which property will change as we scroll the page and the items is inside the viewport\r\n                // in this case we will be translating the image on the y-axis\r\n                // we interpolate between the previous and current value to achieve a smooth effect\r\n                innerTranslationY: {\r\n                    // interpolated value\r\n                    previous: 0, \r\n                    // current value\r\n                    current: 0, \r\n                    // amount to interpolate\r\n                    ease: 0.1,\r\n                    // the maximum value to translate the image is set in a CSS variable (--overflow)\r\n                    maxValue: parseInt(getComputedStyle(this.DOM.image).getPropertyValue('--overflow'), 10),\r\n                    // current value setter\r\n                    // the value of the translation will be:\r\n                    // when the item's top value (relative to the viewport) equals the window's height (items just came into the viewport) the translation = minimum value (- maximum value)\r\n                    // when the item's top value (relative to the viewport) equals \"-item's height\" (item just exited the viewport) the translation = maximum value\r\n                    setValue: () => {\r\n                        const maxValue = this.renderedStyles.innerTranslationY.maxValue;\r\n                        const minValue = -1 * maxValue;\r\n                        return Math.max(Math.min(MathUtils.map(this.props.top - docScroll, winsize.height, -1 * this.props.height, minValue, maxValue), maxValue), minValue)\r\n                    }\r\n                }\r\n            };\r\n            // set the initial values\r\n            this.update();\r\n            // use the IntersectionObserver API to check when the element is inside the viewport\r\n            // only then the element translation will be updated\r\n            this.observer = new IntersectionObserver((entries) => {\r\n                entries.forEach(entry => this.isVisible = entry.intersectionRatio > 0);\r\n            });\r\n            this.observer.observe(this.DOM.el);\r\n            // init/bind events\r\n            this.initEvents();\r\n        }\r\n        update() {\r\n            // gets the item's height and top (relative to the document)\r\n            this.getSize();\r\n            // sets the initial value (no interpolation)\r\n            for (const key in this.renderedStyles ) {\r\n                this.renderedStyles[key].current = this.renderedStyles[key].previous = this.renderedStyles[key].setValue();\r\n            }\r\n            // translate the image\r\n            this.layout();\r\n        }\r\n        getSize() {\r\n            const rect = this.DOM.el.getBoundingClientRect();\r\n            this.props = {\r\n                // item's height\r\n                height: rect.height,\r\n                // offset top relative to the document\r\n                top: docScroll + rect.top \r\n            }\r\n        }\r\n        initEvents() {\r\n            window.addEventListener('resize', () => this.resize());\r\n        }\r\n        resize() {\r\n            // on resize rest sizes and update the translation value\r\n            this.update();\r\n        }\r\n        render() {\r\n            // update the current and interpolated values\r\n            for (const key in this.renderedStyles ) {\r\n                this.renderedStyles[key].current = this.renderedStyles[key].setValue();\r\n                this.renderedStyles[key].previous = MathUtils.lerp(this.renderedStyles[key].previous, this.renderedStyles[key].current, this.renderedStyles[key].ease);\r\n            }\r\n            // and translates the image\r\n            this.layout();\r\n        }\r\n        layout() {\r\n            // translates the image\r\n            this.DOM.image.style.transform = `translate3d(0,${this.renderedStyles.innerTranslationY.previous}px,0)`;\r\n        }\r\n    }\r\n\r\n    // SmoothScroll\r\n    class SmoothScroll {\r\n        constructor() {\r\n            // the <main> element\r\n            this.DOM = {main: document.querySelector('main')};\r\n            // the scrollable element\r\n            // we translate this element when scrolling (y-axis)\r\n            this.DOM.scrollable = this.DOM.main.querySelector('div[data-scroll]');\r\n            // the items on the page\r\n            this.items = [];\r\n            [...this.DOM.main.querySelectorAll('.content > .item')].forEach(item => this.items.push(new Item(item)));\r\n            // here we define which property will change as we scroll the page\r\n            // in this case we will be translating on the y-axis\r\n            // we interpolate between the previous and current value to achieve the smooth scrolling effect\r\n            this.renderedStyles = {\r\n                translationY: {\r\n                    // interpolated value\r\n                    previous: 0, \r\n                    // current value\r\n                    current: 0, \r\n                    // amount to interpolate\r\n                    ease: 0.1,\r\n                    // current value setter\r\n                    // in this case the value of the translation will be the same like the document scroll\r\n                    setValue: () => docScroll\r\n                }\r\n            };\r\n            // set the body's height\r\n            this.setSize();\r\n            // set the initial values\r\n            this.update();\r\n            // the <main> element's style needs to be modified\r\n            this.style();\r\n            // init/bind events\r\n            this.initEvents();\r\n            // start the render loop\r\n            requestAnimationFrame(() => this.render());\r\n        }\r\n        update() {\r\n            // sets the initial value (no interpolation) - translate the scroll value\r\n            for (const key in this.renderedStyles ) {\r\n                this.renderedStyles[key].current = this.renderedStyles[key].previous = this.renderedStyles[key].setValue();\r\n            }   \r\n            // translate the scrollable element\r\n            this.layout();\r\n        }\r\n        layout() {\r\n            // translates the scrollable element\r\n            this.DOM.scrollable.style.transform = `translate3d(0,${-1*this.renderedStyles.translationY.previous}px,0)`;\r\n        }\r\n        setSize() {\r\n            // set the heigh of the body in order to keep the scrollbar on the page\r\n            body.style.height = `${this.DOM.scrollable.scrollHeight}px`;\r\n        }\r\n        style() {\r\n            // the <main> needs to \"stick\" to the screen and not scroll\r\n            // for that we set it to position fixed and overflow hidden \r\n            this.DOM.main.style.position = 'fixed';\r\n            this.DOM.main.style.width = this.DOM.main.style.height = '100%';\r\n            this.DOM.main.style.top = this.DOM.main.style.left = 0;\r\n            this.DOM.main.style.overflow = 'hidden';\r\n        }\r\n        initEvents() {\r\n            // on resize reset the body's height\r\n            window.addEventListener('resize', () => this.setSize());\r\n        }\r\n        render() {\r\n            // update the current and interpolated values\r\n            for (const key in this.renderedStyles ) {\r\n                this.renderedStyles[key].current = this.renderedStyles[key].setValue();\r\n                this.renderedStyles[key].previous = MathUtils.lerp(this.renderedStyles[key].previous, this.renderedStyles[key].current, this.renderedStyles[key].ease);\r\n            }\r\n            // and translate the scrollable element\r\n            this.layout();\r\n            \r\n            // for every item\r\n            for (const item of this.items) {\r\n                // if the item is inside the viewport call it's render function\r\n                // this will update the item's inner image translation, based on the document scroll value and the item's position on the viewport\r\n                if ( item.isVisible ) {\r\n                    item.render();\r\n                }\r\n            }\r\n            \r\n            // loop..\r\n            requestAnimationFrame(() => this.render());\r\n        }\r\n    }\r\n\r\n    /***********************************/\r\n    /********** Preload stuff **********/\r\n\r\n    // Preload images\r\n    const preloadImages = () => {\r\n        return new Promise((resolve, reject) => {\r\n            imagesLoaded(document.querySelectorAll('.item__img'), {background: true}, resolve);\r\n        });\r\n    };\r\n    \r\n    // And then..\r\n    preloadImages().then(() => {\r\n        // Remove the loader\r\n        document.body.classList.remove('loading');\r\n        // Get the scroll position\r\n        getPageYScroll();\r\n        // Initialize the Smooth Scrolling\r\n        new SmoothScroll();\r\n    });\r\n}\r\n\r\n\r\n$(window).on('load', function() {\r\n    $('footer').addClass('fixed');\r\n\r\n    var bdH = parseInt(($('body').outerHeight())+500)+\"px\";\r\n    console.log(bdH)\r\n   $('body').css({\r\n       \"height\": bdH\r\n   })\r\n\r\n});"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvcnRmb2xpby5qcyJdLCJuYW1lcyI6WyJNYXRoVXRpbHMiLCJtYXAiLCJ4IiwiYSIsImIiLCJjIiwiZCIsImxlcnAiLCJuIiwiYm9keSIsImRvY3VtZW50Iiwid2luc2l6ZSIsImNhbGNXaW5zaXplIiwid2lkdGgiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJhZGRFdmVudExpc3RlbmVyIiwiZG9jU2Nyb2xsIiwiZ2V0UGFnZVlTY3JvbGwiLCJwYWdlWU9mZnNldCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbFRvcCIsIkl0ZW0iLCJlbCIsIkRPTSIsImltYWdlIiwicXVlcnlTZWxlY3RvciIsInJlbmRlcmVkU3R5bGVzIiwiaW5uZXJUcmFuc2xhdGlvblkiLCJwcmV2aW91cyIsImN1cnJlbnQiLCJlYXNlIiwibWF4VmFsdWUiLCJwYXJzZUludCIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwic2V0VmFsdWUiLCJtaW5WYWx1ZSIsIk1hdGgiLCJtYXgiLCJtaW4iLCJwcm9wcyIsInRvcCIsInVwZGF0ZSIsIm9ic2VydmVyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImlzVmlzaWJsZSIsImVudHJ5IiwiaW50ZXJzZWN0aW9uUmF0aW8iLCJvYnNlcnZlIiwiaW5pdEV2ZW50cyIsImdldFNpemUiLCJrZXkiLCJsYXlvdXQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVzaXplIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJTbW9vdGhTY3JvbGwiLCJtYWluIiwic2Nyb2xsYWJsZSIsIml0ZW1zIiwicXVlcnlTZWxlY3RvckFsbCIsInB1c2giLCJpdGVtIiwidHJhbnNsYXRpb25ZIiwic2V0U2l6ZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInJlbmRlciIsInNjcm9sbEhlaWdodCIsInBvc2l0aW9uIiwibGVmdCIsIm92ZXJmbG93IiwicHJlbG9hZEltYWdlcyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiaW1hZ2VzTG9hZGVkIiwiYmFja2dyb3VuZCIsInRoZW4iLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCIkIiwib24iLCJhZGRDbGFzcyIsImJkSCIsIm91dGVySGVpZ2h0IiwiY29uc29sZSIsImxvZyIsImNzcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQTtBQUNJO0FBQ0EsUUFBTUEsWUFBWTtBQUNkO0FBQ0FDLGFBQUssYUFBQ0MsQ0FBRCxFQUFJQyxDQUFKLEVBQU9DLENBQVAsRUFBVUMsQ0FBVixFQUFhQyxDQUFiO0FBQUEsbUJBQW1CLENBQUNKLElBQUlDLENBQUwsS0FBV0csSUFBSUQsQ0FBZixLQUFxQkQsSUFBSUQsQ0FBekIsSUFBOEJFLENBQWpEO0FBQUEsU0FGUztBQUdkO0FBQ0FFLGNBQU0sY0FBQ0osQ0FBRCxFQUFJQyxDQUFKLEVBQU9JLENBQVA7QUFBQSxtQkFBYSxDQUFDLElBQUlBLENBQUwsSUFBVUwsQ0FBVixHQUFjSyxJQUFJSixDQUEvQjtBQUFBO0FBSlEsS0FBbEI7O0FBT0E7QUFDQSxRQUFNSyxPQUFPQyxTQUFTRCxJQUF0Qjs7QUFFQTtBQUNBLFFBQUlFLGdCQUFKO0FBQ0EsUUFBTUMsY0FBYyxTQUFkQSxXQUFjO0FBQUEsZUFBTUQsVUFBVSxFQUFDRSxPQUFPQyxPQUFPQyxVQUFmLEVBQTJCQyxRQUFRRixPQUFPRyxXQUExQyxFQUFoQjtBQUFBLEtBQXBCO0FBQ0FMO0FBQ0E7QUFDQUUsV0FBT0ksZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBa0NOLFdBQWxDOztBQUVBO0FBQ0EsUUFBSU8sa0JBQUo7QUFDQSxRQUFNQyxpQkFBaUIsU0FBakJBLGNBQWlCO0FBQUEsZUFBTUQsWUFBWUwsT0FBT08sV0FBUCxJQUFzQlgsU0FBU1ksZUFBVCxDQUF5QkMsU0FBakU7QUFBQSxLQUF2QjtBQUNBVCxXQUFPSSxnQkFBUCxDQUF3QixRQUF4QixFQUFrQ0UsY0FBbEM7O0FBRUE7O0FBeEJKLFFBeUJVSSxJQXpCVjtB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LENBVEQiLCJmaWxlIjoicG9ydGZvbGlvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbntcclxuICAgIC8vIGhlbHBlciBmdW5jdGlvbnNcclxuICAgIGNvbnN0IE1hdGhVdGlscyA9IHtcclxuICAgICAgICAvLyBtYXAgbnVtYmVyIHggZnJvbSByYW5nZSBbYSwgYl0gdG8gW2MsIGRdXHJcbiAgICAgICAgbWFwOiAoeCwgYSwgYiwgYywgZCkgPT4gKHggLSBhKSAqIChkIC0gYykgLyAoYiAtIGEpICsgYyxcclxuICAgICAgICAvLyBsaW5lYXIgaW50ZXJwb2xhdGlvblxyXG4gICAgICAgIGxlcnA6IChhLCBiLCBuKSA9PiAoMSAtIG4pICogYSArIG4gKiBiXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGJvZHkgZWxlbWVudFxyXG4gICAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XHJcbiAgICBcclxuICAgIC8vIGNhbGN1bGF0ZSB0aGUgdmlld3BvcnQgc2l6ZVxyXG4gICAgbGV0IHdpbnNpemU7XHJcbiAgICBjb25zdCBjYWxjV2luc2l6ZSA9ICgpID0+IHdpbnNpemUgPSB7d2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoLCBoZWlnaHQ6IHdpbmRvdy5pbm5lckhlaWdodH07XHJcbiAgICBjYWxjV2luc2l6ZSgpO1xyXG4gICAgLy8gYW5kIHJlY2FsY3VsYXRlIG9uIHJlc2l6ZVxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGNhbGNXaW5zaXplKTtcclxuXHJcbiAgICAvLyBzY3JvbGwgcG9zaXRpb24gYW5kIHVwZGF0ZSBmdW5jdGlvblxyXG4gICAgbGV0IGRvY1Njcm9sbDtcclxuICAgIGNvbnN0IGdldFBhZ2VZU2Nyb2xsID0gKCkgPT4gZG9jU2Nyb2xsID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZ2V0UGFnZVlTY3JvbGwpO1xyXG5cclxuICAgIC8vIEl0ZW1cclxuICAgIGNsYXNzIEl0ZW0ge1xyXG4gICAgICAgIGNvbnN0cnVjdG9yKGVsKSB7XHJcbiAgICAgICAgICAgIC8vIHRoZSAuaXRlbSBlbGVtZW50XHJcbiAgICAgICAgICAgIHRoaXMuRE9NID0ge2VsOiBlbH07XHJcbiAgICAgICAgICAgIC8vIHRoZSBpbm5lciBpbWFnZVxyXG4gICAgICAgICAgICB0aGlzLkRPTS5pbWFnZSA9IHRoaXMuRE9NLmVsLnF1ZXJ5U2VsZWN0b3IoJy5pdGVtX19pbWcnKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlZFN0eWxlcyA9IHtcclxuICAgICAgICAgICAgICAgIC8vIGhlcmUgd2UgZGVmaW5lIHdoaWNoIHByb3BlcnR5IHdpbGwgY2hhbmdlIGFzIHdlIHNjcm9sbCB0aGUgcGFnZSBhbmQgdGhlIGl0ZW1zIGlzIGluc2lkZSB0aGUgdmlld3BvcnRcclxuICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgY2FzZSB3ZSB3aWxsIGJlIHRyYW5zbGF0aW5nIHRoZSBpbWFnZSBvbiB0aGUgeS1heGlzXHJcbiAgICAgICAgICAgICAgICAvLyB3ZSBpbnRlcnBvbGF0ZSBiZXR3ZWVuIHRoZSBwcmV2aW91cyBhbmQgY3VycmVudCB2YWx1ZSB0byBhY2hpZXZlIGEgc21vb3RoIGVmZmVjdFxyXG4gICAgICAgICAgICAgICAgaW5uZXJUcmFuc2xhdGlvblk6IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbnRlcnBvbGF0ZWQgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91czogMCwgXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY3VycmVudCB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQ6IDAsIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFtb3VudCB0byBpbnRlcnBvbGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGVhc2U6IDAuMSxcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgbWF4aW11bSB2YWx1ZSB0byB0cmFuc2xhdGUgdGhlIGltYWdlIGlzIHNldCBpbiBhIENTUyB2YXJpYWJsZSAoLS1vdmVyZmxvdylcclxuICAgICAgICAgICAgICAgICAgICBtYXhWYWx1ZTogcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLkRPTS5pbWFnZSkuZ2V0UHJvcGVydHlWYWx1ZSgnLS1vdmVyZmxvdycpLCAxMCksXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY3VycmVudCB2YWx1ZSBzZXR0ZXJcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgdmFsdWUgb2YgdGhlIHRyYW5zbGF0aW9uIHdpbGwgYmU6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgaXRlbSdzIHRvcCB2YWx1ZSAocmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0KSBlcXVhbHMgdGhlIHdpbmRvdydzIGhlaWdodCAoaXRlbXMganVzdCBjYW1lIGludG8gdGhlIHZpZXdwb3J0KSB0aGUgdHJhbnNsYXRpb24gPSBtaW5pbXVtIHZhbHVlICgtIG1heGltdW0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgaXRlbSdzIHRvcCB2YWx1ZSAocmVsYXRpdmUgdG8gdGhlIHZpZXdwb3J0KSBlcXVhbHMgXCItaXRlbSdzIGhlaWdodFwiIChpdGVtIGp1c3QgZXhpdGVkIHRoZSB2aWV3cG9ydCkgdGhlIHRyYW5zbGF0aW9uID0gbWF4aW11bSB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIHNldFZhbHVlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heFZhbHVlID0gdGhpcy5yZW5kZXJlZFN0eWxlcy5pbm5lclRyYW5zbGF0aW9uWS5tYXhWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWluVmFsdWUgPSAtMSAqIG1heFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4oTWF0aFV0aWxzLm1hcCh0aGlzLnByb3BzLnRvcCAtIGRvY1Njcm9sbCwgd2luc2l6ZS5oZWlnaHQsIC0xICogdGhpcy5wcm9wcy5oZWlnaHQsIG1pblZhbHVlLCBtYXhWYWx1ZSksIG1heFZhbHVlKSwgbWluVmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBzZXQgdGhlIGluaXRpYWwgdmFsdWVzXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIC8vIHVzZSB0aGUgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgQVBJIHRvIGNoZWNrIHdoZW4gdGhlIGVsZW1lbnQgaXMgaW5zaWRlIHRoZSB2aWV3cG9ydFxyXG4gICAgICAgICAgICAvLyBvbmx5IHRoZW4gdGhlIGVsZW1lbnQgdHJhbnNsYXRpb24gd2lsbCBiZSB1cGRhdGVkXHJcbiAgICAgICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcclxuICAgICAgICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB0aGlzLmlzVmlzaWJsZSA9IGVudHJ5LmludGVyc2VjdGlvblJhdGlvID4gMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUodGhpcy5ET00uZWwpO1xyXG4gICAgICAgICAgICAvLyBpbml0L2JpbmQgZXZlbnRzXHJcbiAgICAgICAgICAgIHRoaXMuaW5pdEV2ZW50cygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1cGRhdGUoKSB7XHJcbiAgICAgICAgICAgIC8vIGdldHMgdGhlIGl0ZW0ncyBoZWlnaHQgYW5kIHRvcCAocmVsYXRpdmUgdG8gdGhlIGRvY3VtZW50KVxyXG4gICAgICAgICAgICB0aGlzLmdldFNpemUoKTtcclxuICAgICAgICAgICAgLy8gc2V0cyB0aGUgaW5pdGlhbCB2YWx1ZSAobm8gaW50ZXJwb2xhdGlvbilcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5yZW5kZXJlZFN0eWxlcyApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZWRTdHlsZXNba2V5XS5jdXJyZW50ID0gdGhpcy5yZW5kZXJlZFN0eWxlc1trZXldLnByZXZpb3VzID0gdGhpcy5yZW5kZXJlZFN0eWxlc1trZXldLnNldFZhbHVlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdHJhbnNsYXRlIHRoZSBpbWFnZVxyXG4gICAgICAgICAgICB0aGlzLmxheW91dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBnZXRTaXplKCkge1xyXG4gICAgICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5ET00uZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMgPSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpdGVtJ3MgaGVpZ2h0XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgLy8gb2Zmc2V0IHRvcCByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnRcclxuICAgICAgICAgICAgICAgIHRvcDogZG9jU2Nyb2xsICsgcmVjdC50b3AgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaW5pdEV2ZW50cygpIHtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHRoaXMucmVzaXplKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNpemUoKSB7XHJcbiAgICAgICAgICAgIC8vIG9uIHJlc2l6ZSByZXN0IHNpemVzIGFuZCB1cGRhdGUgdGhlIHRyYW5zbGF0aW9uIHZhbHVlXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlbmRlcigpIHtcclxuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBjdXJyZW50IGFuZCBpbnRlcnBvbGF0ZWQgdmFsdWVzXHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMucmVuZGVyZWRTdHlsZXMgKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVkU3R5bGVzW2tleV0uY3VycmVudCA9IHRoaXMucmVuZGVyZWRTdHlsZXNba2V5XS5zZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlZFN0eWxlc1trZXldLnByZXZpb3VzID0gTWF0aFV0aWxzLmxlcnAodGhpcy5yZW5kZXJlZFN0eWxlc1trZXldLnByZXZpb3VzLCB0aGlzLnJlbmRlcmVkU3R5bGVzW2tleV0uY3VycmVudCwgdGhpcy5yZW5kZXJlZFN0eWxlc1trZXldLmVhc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGFuZCB0cmFuc2xhdGVzIHRoZSBpbWFnZVxyXG4gICAgICAgICAgICB0aGlzLmxheW91dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsYXlvdXQoKSB7XHJcbiAgICAgICAgICAgIC8vIHRyYW5zbGF0ZXMgdGhlIGltYWdlXHJcbiAgICAgICAgICAgIHRoaXMuRE9NLmltYWdlLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLCR7dGhpcy5yZW5kZXJlZFN0eWxlcy5pbm5lclRyYW5zbGF0aW9uWS5wcmV2aW91c31weCwwKWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFNtb290aFNjcm9sbFxyXG4gICAgY2xhc3MgU21vb3RoU2Nyb2xsIHtcclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgLy8gdGhlIDxtYWluPiBlbGVtZW50XHJcbiAgICAgICAgICAgIHRoaXMuRE9NID0ge21haW46IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4nKX07XHJcbiAgICAgICAgICAgIC8vIHRoZSBzY3JvbGxhYmxlIGVsZW1lbnRcclxuICAgICAgICAgICAgLy8gd2UgdHJhbnNsYXRlIHRoaXMgZWxlbWVudCB3aGVuIHNjcm9sbGluZyAoeS1heGlzKVxyXG4gICAgICAgICAgICB0aGlzLkRPTS5zY3JvbGxhYmxlID0gdGhpcy5ET00ubWFpbi5xdWVyeVNlbGVjdG9yKCdkaXZbZGF0YS1zY3JvbGxdJyk7XHJcbiAgICAgICAgICAgIC8vIHRoZSBpdGVtcyBvbiB0aGUgcGFnZVxyXG4gICAgICAgICAgICB0aGlzLml0ZW1zID0gW107XHJcbiAgICAgICAgICAgIFsuLi50aGlzLkRPTS5tYWluLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb250ZW50ID4gLml0ZW0nKV0uZm9yRWFjaChpdGVtID0+IHRoaXMuaXRlbXMucHVzaChuZXcgSXRlbShpdGVtKSkpO1xyXG4gICAgICAgICAgICAvLyBoZXJlIHdlIGRlZmluZSB3aGljaCBwcm9wZXJ0eSB3aWxsIGNoYW5nZSBhcyB3ZSBzY3JvbGwgdGhlIHBhZ2VcclxuICAgICAgICAgICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdpbGwgYmUgdHJhbnNsYXRpbmcgb24gdGhlIHktYXhpc1xyXG4gICAgICAgICAgICAvLyB3ZSBpbnRlcnBvbGF0ZSBiZXR3ZWVuIHRoZSBwcmV2aW91cyBhbmQgY3VycmVudCB2YWx1ZSB0byBhY2hpZXZlIHRoZSBzbW9vdGggc2Nyb2xsaW5nIGVmZmVjdFxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkU3R5bGVzID0ge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRpb25ZOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW50ZXJwb2xhdGVkIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXM6IDAsIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50OiAwLCBcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbW91bnQgdG8gaW50ZXJwb2xhdGVcclxuICAgICAgICAgICAgICAgICAgICBlYXNlOiAwLjEsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY3VycmVudCB2YWx1ZSBzZXR0ZXJcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbiB0aGlzIGNhc2UgdGhlIHZhbHVlIG9mIHRoZSB0cmFuc2xhdGlvbiB3aWxsIGJlIHRoZSBzYW1lIGxpa2UgdGhlIGRvY3VtZW50IHNjcm9sbFxyXG4gICAgICAgICAgICAgICAgICAgIHNldFZhbHVlOiAoKSA9PiBkb2NTY3JvbGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8gc2V0IHRoZSBib2R5J3MgaGVpZ2h0XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U2l6ZSgpO1xyXG4gICAgICAgICAgICAvLyBzZXQgdGhlIGluaXRpYWwgdmFsdWVzXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIC8vIHRoZSA8bWFpbj4gZWxlbWVudCdzIHN0eWxlIG5lZWRzIHRvIGJlIG1vZGlmaWVkXHJcbiAgICAgICAgICAgIHRoaXMuc3R5bGUoKTtcclxuICAgICAgICAgICAgLy8gaW5pdC9iaW5kIGV2ZW50c1xyXG4gICAgICAgICAgICB0aGlzLmluaXRFdmVudHMoKTtcclxuICAgICAgICAgICAgLy8gc3RhcnQgdGhlIHJlbmRlciBsb29wXHJcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnJlbmRlcigpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXBkYXRlKCkge1xyXG4gICAgICAgICAgICAvLyBzZXRzIHRoZSBpbml0aWFsIHZhbHVlIChubyBpbnRlcnBvbGF0aW9uKSAtIHRyYW5zbGF0ZSB0aGUgc2Nyb2xsIHZhbHVlXHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMucmVuZGVyZWRTdHlsZXMgKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVkU3R5bGVzW2tleV0uY3VycmVudCA9IHRoaXMucmVuZGVyZWRTdHlsZXNba2V5XS5wcmV2aW91cyA9IHRoaXMucmVuZGVyZWRTdHlsZXNba2V5XS5zZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICB9ICAgXHJcbiAgICAgICAgICAgIC8vIHRyYW5zbGF0ZSB0aGUgc2Nyb2xsYWJsZSBlbGVtZW50XHJcbiAgICAgICAgICAgIHRoaXMubGF5b3V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxheW91dCgpIHtcclxuICAgICAgICAgICAgLy8gdHJhbnNsYXRlcyB0aGUgc2Nyb2xsYWJsZSBlbGVtZW50XHJcbiAgICAgICAgICAgIHRoaXMuRE9NLnNjcm9sbGFibGUuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsJHstMSp0aGlzLnJlbmRlcmVkU3R5bGVzLnRyYW5zbGF0aW9uWS5wcmV2aW91c31weCwwKWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldFNpemUoKSB7XHJcbiAgICAgICAgICAgIC8vIHNldCB0aGUgaGVpZ2ggb2YgdGhlIGJvZHkgaW4gb3JkZXIgdG8ga2VlcCB0aGUgc2Nyb2xsYmFyIG9uIHRoZSBwYWdlXHJcbiAgICAgICAgICAgIGJvZHkuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy5ET00uc2Nyb2xsYWJsZS5zY3JvbGxIZWlnaHR9cHhgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdHlsZSgpIHtcclxuICAgICAgICAgICAgLy8gdGhlIDxtYWluPiBuZWVkcyB0byBcInN0aWNrXCIgdG8gdGhlIHNjcmVlbiBhbmQgbm90IHNjcm9sbFxyXG4gICAgICAgICAgICAvLyBmb3IgdGhhdCB3ZSBzZXQgaXQgdG8gcG9zaXRpb24gZml4ZWQgYW5kIG92ZXJmbG93IGhpZGRlbiBcclxuICAgICAgICAgICAgdGhpcy5ET00ubWFpbi5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XHJcbiAgICAgICAgICAgIHRoaXMuRE9NLm1haW4uc3R5bGUud2lkdGggPSB0aGlzLkRPTS5tYWluLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcclxuICAgICAgICAgICAgdGhpcy5ET00ubWFpbi5zdHlsZS50b3AgPSB0aGlzLkRPTS5tYWluLnN0eWxlLmxlZnQgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLkRPTS5tYWluLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluaXRFdmVudHMoKSB7XHJcbiAgICAgICAgICAgIC8vIG9uIHJlc2l6ZSByZXNldCB0aGUgYm9keSdzIGhlaWdodFxyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4gdGhpcy5zZXRTaXplKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgY3VycmVudCBhbmQgaW50ZXJwb2xhdGVkIHZhbHVlc1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnJlbmRlcmVkU3R5bGVzICkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlZFN0eWxlc1trZXldLmN1cnJlbnQgPSB0aGlzLnJlbmRlcmVkU3R5bGVzW2tleV0uc2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZWRTdHlsZXNba2V5XS5wcmV2aW91cyA9IE1hdGhVdGlscy5sZXJwKHRoaXMucmVuZGVyZWRTdHlsZXNba2V5XS5wcmV2aW91cywgdGhpcy5yZW5kZXJlZFN0eWxlc1trZXldLmN1cnJlbnQsIHRoaXMucmVuZGVyZWRTdHlsZXNba2V5XS5lYXNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhbmQgdHJhbnNsYXRlIHRoZSBzY3JvbGxhYmxlIGVsZW1lbnRcclxuICAgICAgICAgICAgdGhpcy5sYXlvdXQoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIGZvciBldmVyeSBpdGVtXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgaXRlbSBpcyBpbnNpZGUgdGhlIHZpZXdwb3J0IGNhbGwgaXQncyByZW5kZXIgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCB1cGRhdGUgdGhlIGl0ZW0ncyBpbm5lciBpbWFnZSB0cmFuc2xhdGlvbiwgYmFzZWQgb24gdGhlIGRvY3VtZW50IHNjcm9sbCB2YWx1ZSBhbmQgdGhlIGl0ZW0ncyBwb3NpdGlvbiBvbiB0aGUgdmlld3BvcnRcclxuICAgICAgICAgICAgICAgIGlmICggaXRlbS5pc1Zpc2libGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gbG9vcC4uXHJcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnJlbmRlcigpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgLyoqKioqKioqKiogUHJlbG9hZCBzdHVmZiAqKioqKioqKioqL1xyXG5cclxuICAgIC8vIFByZWxvYWQgaW1hZ2VzXHJcbiAgICBjb25zdCBwcmVsb2FkSW1hZ2VzID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGltYWdlc0xvYWRlZChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaXRlbV9faW1nJyksIHtiYWNrZ3JvdW5kOiB0cnVlfSwgcmVzb2x2ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAvLyBBbmQgdGhlbi4uXHJcbiAgICBwcmVsb2FkSW1hZ2VzKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBsb2FkZXJcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRpbmcnKTtcclxuICAgICAgICAvLyBHZXQgdGhlIHNjcm9sbCBwb3NpdGlvblxyXG4gICAgICAgIGdldFBhZ2VZU2Nyb2xsKCk7XHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgU21vb3RoIFNjcm9sbGluZ1xyXG4gICAgICAgIG5ldyBTbW9vdGhTY3JvbGwoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5cclxuJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XHJcbiAgICAkKCdmb290ZXInKS5hZGRDbGFzcygnZml4ZWQnKTtcclxuXHJcbiAgICB2YXIgYmRIID0gcGFyc2VJbnQoKCQoJ2JvZHknKS5vdXRlckhlaWdodCgpKSs1MDApK1wicHhcIjtcclxuICAgIGNvbnNvbGUubG9nKGJkSClcclxuICAgJCgnYm9keScpLmNzcyh7XHJcbiAgICAgICBcImhlaWdodFwiOiBiZEhcclxuICAgfSlcclxuXHJcbn0pOyJdfQ=="}